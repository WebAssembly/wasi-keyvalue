/// A keyvalue interface that provides atomic operations.
/// 
/// Atomic operations are single, indivisible operations. When a fault causes an atomic operation to
/// fail, it will appear to the invoker of the atomic operation that the action either completed
/// successfully or did nothing at all.
interface atomics {
  use types.{bucket, error};
  
  /// The atomics resource contains atomic operations that can be executed against a store
  resource atomics {
	/// Create a new atomic resource, using the given bucket to access the data
	open: static func(store: borrow<bucket>) -> atomics;

	/// Atomically increment the value associated with the key in the store by the given delta. It
	/// returns the new value.
	///
	/// If the key does not exist in the store, it creates a new key-value pair with the value set
	/// to the given delta. 
	///
	/// If any other error occurs, it returns an `Err(error)`.
	increment: func(key: string, delta: u64) -> result<u64, error>;
  }
}