// A generic keyvalue interface for WASI.
interface types {
	/// A bucket is a collection of key-value pairs. Each key-value pair is stored as a entry in the
	/// bucket, and the bucket itself acts as a collection of all these entries.
	///
	/// It is worth noting that the exact terminology for bucket in key-value stores can very
	/// depending on the specific implementation. For example:
	///
	/// 1. Amazon DynamoDB calls a collection of key-value pairs a table
	/// 2. Redis has hashes, sets, and sorted sets as different types of collections
	/// 3. Cassandra calls a collection of key-value pairs a column family
	/// 4. MongoDB calls a collection of key-value pairs a collection
	/// 5. Riak calls a collection of key-value pairs a bucket
	/// 6. Memcached calls a collection of key-value pairs a slab
	/// 7. Azure Cosmos DB calls a collection of key-value pairs a container
	///
	/// In this interface, we use the term `bucket` to refer to a collection of key-value pairs
	resource bucket {
		/// Get the store with the specified identifier.
		///
		/// `identifier` must refer to a store provided by the host.
		///
		/// `error::no-such-store` will be raised if the `identifier` is not recognized.
		get: static func(identifier: string) -> result<bucket, error>;
	}

	/// The set of errors which may be raised by functions in this interface
	variant error {
		/// The host does not recognize the store identifier requested.
		no-such-store,

		/// The requesting component does not have access to the specified store
		/// (which may or may not exist).
		access-denied,

		/// Some implementation-specific error has occurred (e.g. I/O)
		other(string)
	}
}
